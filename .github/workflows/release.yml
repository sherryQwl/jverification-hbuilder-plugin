
name: Upload Release Asset

on:
  push:
    tags: 
      - 'v*.*.*'
 

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      # - name: Get the version
      #   id: get_tag_version
      #   run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}  
      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          echo $RELEASE_VERSION
          echo ${{ steps.vars.outputs.tag }}
        
      - name: Gzip
        run: |
          tar -jcvf jver-${{ steps.vars.outputs.tag }}.tar.gz nativeplugins
          echo ${{ steps.vars.outputs.tag }}
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          release_name: V ${{ steps.vars.outputs.tag }}
          draft: false
          prerelease: false
           
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./jver-${{ steps.vars.outputs.tag }}.tar.gz
          asset_name: jver-${{ steps.vars.outputs.tag }}.tar.gz
          asset_content_type: application/zip


name: Upload Release Asset

on:
  push:
    branches: jg

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [1.1.0]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      # - name: Build project # This would actually build your project, using zip for an example artifact
      #   run: |
      #     zip --junk-paths my-artifact README.md
      - name: Gzip
        run: |
          ls -al 
          zip --junk-paths jver-${{ matrix.version }}.zip nativeplugins
       # mkdir jver-${{ matrix.version }}
       # cp -r nativeplugins jver-${{ matrix.version }}
         
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: .nativeplugins/
          asset_name: jver-${{ matrix.version }}
          asset_content_type: text/plain
